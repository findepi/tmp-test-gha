name: ci

on:
  push:
    branches:
      - master
  pull_request:

env:
  CONTINUOUS_INTEGRATION: true

# Cancel previous PR builds.
concurrency:
  # Cancel all workflow runs except latest within a concurrency group. This is achieved by defining a concurrency group for the PR.
  # Non-PR builds have singleton concurrency groups.
  # When triggered by the repository_dispatch, add the expected SHA to avoid cancelling the run from the PR.
  group: |
    workflow=${{ github.workflow }},
    pr_number=${{ github.event_name == 'pull_request' && github.event.number || 'NA' }},
    dispatch_sha=${{ github.event_name == 'repository_dispatch' && github.event.client_payload.slash_command.args.named.sha || 'NA' }},
    commit_sha=${{ github.event_name != 'pull_request' && github.event_name != 'repository_dispatch' && github.sha || 'NA' }}
  cancel-in-progress: true

jobs:
  build-success:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      [
        amt,
        b,
        cs,
      ]
    steps:
      - name: "Check results"
        run: |
          set -x
          echo '${{ needs.amt.result }}' | grep -xE 'success|skipped' || { echo 'amt failed' >&2; exit 1; }
          echo '${{ needs.b.result }}' | grep -xE 'success|skipped' || { echo 'b failed' >&2; exit 1; }
          echo '${{ needs.cs.result }}' | grep -xE 'success|skipped' || { echo 'cs failed' >&2; exit 1; }

  amt:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        p: [1, 2]
    steps:
      - uses: actions/checkout@v4
      - name: "test"
        run: "true"

  b:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "test"
        run: |
          test $[RANDOM % 3] -eq 0

  cs:
    runs-on: ubuntu-latest
    if: "github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'duplicate')"
    steps:
      - uses: actions/checkout@v4
      - name: "test"
        run: "false"
